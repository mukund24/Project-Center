#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectCenter.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ProjectDatabase")]
	public partial class DataBaseTableClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjectStatus(ProjectStatus instance);
    partial void UpdateProjectStatus(ProjectStatus instance);
    partial void DeleteProjectStatus(ProjectStatus instance);
    partial void InsertProjectTeam(ProjectTeam instance);
    partial void UpdateProjectTeam(ProjectTeam instance);
    partial void DeleteProjectTeam(ProjectTeam instance);
    partial void InsertProjectTeamList(ProjectTeamList instance);
    partial void UpdateProjectTeamList(ProjectTeamList instance);
    partial void DeleteProjectTeamList(ProjectTeamList instance);
    partial void InsertSoftware_Requirement_Team(Software_Requirement_Team instance);
    partial void UpdateSoftware_Requirement_Team(Software_Requirement_Team instance);
    partial void DeleteSoftware_Requirement_Team(Software_Requirement_Team instance);
    partial void InsertSoftware_Requirement(Software_Requirement instance);
    partial void UpdateSoftware_Requirement(Software_Requirement instance);
    partial void DeleteSoftware_Requirement(Software_Requirement instance);
    partial void InsertTypeOfUser(TypeOfUser instance);
    partial void UpdateTypeOfUser(TypeOfUser instance);
    partial void DeleteTypeOfUser(TypeOfUser instance);
    partial void InsertWorkPackageDescription(WorkPackageDescription instance);
    partial void UpdateWorkPackageDescription(WorkPackageDescription instance);
    partial void DeleteWorkPackageDescription(WorkPackageDescription instance);
    partial void InsertWpsForSr(WpsForSr instance);
    partial void UpdateWpsForSr(WpsForSr instance);
    partial void DeleteWpsForSr(WpsForSr instance);
    partial void InsertStatusReport(StatusReport instance);
    partial void UpdateStatusReport(StatusReport instance);
    partial void DeleteStatusReport(StatusReport instance);
    #endregion
		
		public DataBaseTableClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ProjectDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseTableClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseTableClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseTableClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseTableClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjectStatus> ProjectStatus
		{
			get
			{
				return this.GetTable<ProjectStatus>();
			}
		}
		
		public System.Data.Linq.Table<ProjectTeam> ProjectTeams
		{
			get
			{
				return this.GetTable<ProjectTeam>();
			}
		}
		
		public System.Data.Linq.Table<ProjectTeamList> ProjectTeamLists
		{
			get
			{
				return this.GetTable<ProjectTeamList>();
			}
		}
		
		public System.Data.Linq.Table<Software_Requirement_Team> Software_Requirement_Teams
		{
			get
			{
				return this.GetTable<Software_Requirement_Team>();
			}
		}
		
		public System.Data.Linq.Table<Software_Requirement> Software_Requirements
		{
			get
			{
				return this.GetTable<Software_Requirement>();
			}
		}
		
		public System.Data.Linq.Table<TypeOfUser> TypeOfUsers
		{
			get
			{
				return this.GetTable<TypeOfUser>();
			}
		}
		
		public System.Data.Linq.Table<WorkPackageDescription> WorkPackageDescriptions
		{
			get
			{
				return this.GetTable<WorkPackageDescription>();
			}
		}
		
		public System.Data.Linq.Table<WpsForSr> WpsForSrs
		{
			get
			{
				return this.GetTable<WpsForSr>();
			}
		}
		
		public System.Data.Linq.Table<StatusReport> StatusReports
		{
			get
			{
				return this.GetTable<StatusReport>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmpId;
		
		private string _Fname;
		
		private string _Lname;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<ProjectTeamList> _ProjectTeamLists;
		
		private EntitySet<WorkPackageDescription> _WorkPackageDescriptions;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmpIdChanging(int value);
    partial void OnEmpIdChanged();
    partial void OnFnameChanging(string value);
    partial void OnFnameChanged();
    partial void OnLnameChanging(string value);
    partial void OnLnameChanged();
    #endregion
		
		public Employee()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int EmpId
		{
			get
			{
				return this._EmpId;
			}
			set
			{
				if ((this._EmpId != value))
				{
					this.OnEmpIdChanging(value);
					this.SendPropertyChanging();
					this._EmpId = value;
					this.SendPropertyChanged("EmpId");
					this.OnEmpIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Fname
		{
			get
			{
				return this._Fname;
			}
			set
			{
				if ((this._Fname != value))
				{
					this.OnFnameChanging(value);
					this.SendPropertyChanging();
					this._Fname = value;
					this.SendPropertyChanged("Fname");
					this.OnFnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lname", DbType="NVarChar(50)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Lname
		{
			get
			{
				return this._Lname;
			}
			set
			{
				if ((this._Lname != value))
				{
					this.OnLnameChanging(value);
					this.SendPropertyChanging();
					this._Lname = value;
					this.SendPropertyChanged("Lname");
					this.OnLnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Project", Storage="_Projects", ThisKey="EmpId", OtherKey="ManagerID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<Project> Projects
		{
			get
			{
				if ((this.serializing 
							&& (this._Projects.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ProjectTeamList", Storage="_ProjectTeamLists", ThisKey="EmpId", OtherKey="EmpID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<ProjectTeamList> ProjectTeamLists
		{
			get
			{
				if ((this.serializing 
							&& (this._ProjectTeamLists.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ProjectTeamLists;
			}
			set
			{
				this._ProjectTeamLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkPackageDescription", Storage="_WorkPackageDescriptions", ThisKey="EmpId", OtherKey="CreatedBy")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6, EmitDefaultValue=false)]
		public EntitySet<WorkPackageDescription> WorkPackageDescriptions
		{
			get
			{
				if ((this.serializing 
							&& (this._WorkPackageDescriptions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._WorkPackageDescriptions;
			}
			set
			{
				this._WorkPackageDescriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_ProjectTeamLists(ProjectTeamList entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_ProjectTeamLists(ProjectTeamList entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_WorkPackageDescriptions(WorkPackageDescription entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_WorkPackageDescriptions(WorkPackageDescription entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void Initialize()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._ProjectTeamLists = new EntitySet<ProjectTeamList>(new Action<ProjectTeamList>(this.attach_ProjectTeamLists), new Action<ProjectTeamList>(this.detach_ProjectTeamLists));
			this._WorkPackageDescriptions = new EntitySet<WorkPackageDescription>(new Action<WorkPackageDescription>(this.attach_WorkPackageDescriptions), new Action<WorkPackageDescription>(this.detach_WorkPackageDescriptions));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private string _ProjectName;
		
		private System.DateTime _Start_Date;
		
		private System.Nullable<System.DateTime> _End_Date;
		
		private System.Nullable<System.DateTime> _Last_Review_Date;
		
		private int _ProjectStatusID;
		
		private string _Project_Desc;
		
		private int _ManagerID;
		
		private EntitySet<ProjectTeam> _ProjectTeams;
		
		private EntitySet<Software_Requirement> _Software_Requirements;
		
		private EntitySet<WorkPackageDescription> _WorkPackageDescriptions;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<ProjectStatus> _ProjectStatus;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnStart_DateChanging(System.DateTime value);
    partial void OnStart_DateChanged();
    partial void OnEnd_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnEnd_DateChanged();
    partial void OnLast_Review_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnLast_Review_DateChanged();
    partial void OnProjectStatusIDChanging(int value);
    partial void OnProjectStatusIDChanged();
    partial void OnProject_DescChanging(string value);
    partial void OnProject_DescChanged();
    partial void OnManagerIDChanging(int value);
    partial void OnManagerIDChanged();
    #endregion
		
		public Project()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_Date", DbType="Date NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.DateTime Start_Date
		{
			get
			{
				return this._Start_Date;
			}
			set
			{
				if ((this._Start_Date != value))
				{
					this.OnStart_DateChanging(value);
					this.SendPropertyChanging();
					this._Start_Date = value;
					this.SendPropertyChanged("Start_Date");
					this.OnStart_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_End_Date", DbType="Date")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Nullable<System.DateTime> End_Date
		{
			get
			{
				return this._End_Date;
			}
			set
			{
				if ((this._End_Date != value))
				{
					this.OnEnd_DateChanging(value);
					this.SendPropertyChanging();
					this._End_Date = value;
					this.SendPropertyChanged("End_Date");
					this.OnEnd_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Review_Date", DbType="Date")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Nullable<System.DateTime> Last_Review_Date
		{
			get
			{
				return this._Last_Review_Date;
			}
			set
			{
				if ((this._Last_Review_Date != value))
				{
					this.OnLast_Review_DateChanging(value);
					this.SendPropertyChanging();
					this._Last_Review_Date = value;
					this.SendPropertyChanged("Last_Review_Date");
					this.OnLast_Review_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectStatusID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public int ProjectStatusID
		{
			get
			{
				return this._ProjectStatusID;
			}
			set
			{
				if ((this._ProjectStatusID != value))
				{
					if (this._ProjectStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectStatusID = value;
					this.SendPropertyChanged("ProjectStatusID");
					this.OnProjectStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project_Desc", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public string Project_Desc
		{
			get
			{
				return this._Project_Desc;
			}
			set
			{
				if ((this._Project_Desc != value))
				{
					this.OnProject_DescChanging(value);
					this.SendPropertyChanging();
					this._Project_Desc = value;
					this.SendPropertyChanged("Project_Desc");
					this.OnProject_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public int ManagerID
		{
			get
			{
				return this._ManagerID;
			}
			set
			{
				if ((this._ManagerID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIDChanging(value);
					this.SendPropertyChanging();
					this._ManagerID = value;
					this.SendPropertyChanged("ManagerID");
					this.OnManagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTeam", Storage="_ProjectTeams", ThisKey="ProjectID", OtherKey="ProjectID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<ProjectTeam> ProjectTeams
		{
			get
			{
				if ((this.serializing 
							&& (this._ProjectTeams.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ProjectTeams;
			}
			set
			{
				this._ProjectTeams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Software_Requirement", Storage="_Software_Requirements", ThisKey="ProjectID", OtherKey="ProjectID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10, EmitDefaultValue=false)]
		public EntitySet<Software_Requirement> Software_Requirements
		{
			get
			{
				if ((this.serializing 
							&& (this._Software_Requirements.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Software_Requirements;
			}
			set
			{
				this._Software_Requirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_WorkPackageDescription", Storage="_WorkPackageDescriptions", ThisKey="ProjectID", OtherKey="ProjectID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11, EmitDefaultValue=false)]
		public EntitySet<WorkPackageDescription> WorkPackageDescriptions
		{
			get
			{
				if ((this.serializing 
							&& (this._WorkPackageDescriptions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._WorkPackageDescriptions;
			}
			set
			{
				this._WorkPackageDescriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Project", Storage="_Employee", ThisKey="ManagerID", OtherKey="EmpId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._ManagerID = value.EmpId;
					}
					else
					{
						this._ManagerID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectStatus_Project", Storage="_ProjectStatus", ThisKey="ProjectStatusID", OtherKey="ProjectStatusID", IsForeignKey=true)]
		public ProjectStatus ProjectStatus
		{
			get
			{
				return this._ProjectStatus.Entity;
			}
			set
			{
				ProjectStatus previousValue = this._ProjectStatus.Entity;
				if (((previousValue != value) 
							|| (this._ProjectStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectStatus.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._ProjectStatus.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._ProjectStatusID = value.ProjectStatusID;
					}
					else
					{
						this._ProjectStatusID = default(int);
					}
					this.SendPropertyChanged("ProjectStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectTeams(ProjectTeam entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectTeams(ProjectTeam entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_Software_Requirements(Software_Requirement entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Software_Requirements(Software_Requirement entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_WorkPackageDescriptions(WorkPackageDescription entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_WorkPackageDescriptions(WorkPackageDescription entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void Initialize()
		{
			this._ProjectTeams = new EntitySet<ProjectTeam>(new Action<ProjectTeam>(this.attach_ProjectTeams), new Action<ProjectTeam>(this.detach_ProjectTeams));
			this._Software_Requirements = new EntitySet<Software_Requirement>(new Action<Software_Requirement>(this.attach_Software_Requirements), new Action<Software_Requirement>(this.detach_Software_Requirements));
			this._WorkPackageDescriptions = new EntitySet<WorkPackageDescription>(new Action<WorkPackageDescription>(this.attach_WorkPackageDescriptions), new Action<WorkPackageDescription>(this.detach_WorkPackageDescriptions));
			this._Employee = default(EntityRef<Employee>);
			this._ProjectStatus = default(EntityRef<ProjectStatus>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectStatus")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class ProjectStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectStatusID;
		
		private string _StatusValue;
		
		private EntitySet<Project> _Projects;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectStatusIDChanging(int value);
    partial void OnProjectStatusIDChanged();
    partial void OnStatusValueChanging(string value);
    partial void OnStatusValueChanged();
    #endregion
		
		public ProjectStatus()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int ProjectStatusID
		{
			get
			{
				return this._ProjectStatusID;
			}
			set
			{
				if ((this._ProjectStatusID != value))
				{
					this.OnProjectStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectStatusID = value;
					this.SendPropertyChanged("ProjectStatusID");
					this.OnProjectStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusValue", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string StatusValue
		{
			get
			{
				return this._StatusValue;
			}
			set
			{
				if ((this._StatusValue != value))
				{
					this.OnStatusValueChanging(value);
					this.SendPropertyChanging();
					this._StatusValue = value;
					this.SendPropertyChanged("StatusValue");
					this.OnStatusValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectStatus_Project", Storage="_Projects", ThisKey="ProjectStatusID", OtherKey="ProjectStatusID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<Project> Projects
		{
			get
			{
				if ((this.serializing 
							&& (this._Projects.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectStatus = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectStatus = null;
		}
		
		private void Initialize()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectTeam")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class ProjectTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private int _ProjectID;
		
		private EntitySet<ProjectTeamList> _ProjectTeamLists;
		
		private EntitySet<Software_Requirement_Team> _Software_Requirement_Teams;
		
		private EntityRef<Project> _Project;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    #endregion
		
		public ProjectTeam()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectTeam_ProjectTeamList", Storage="_ProjectTeamLists", ThisKey="TeamID", OtherKey="TeamID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<ProjectTeamList> ProjectTeamLists
		{
			get
			{
				if ((this.serializing 
							&& (this._ProjectTeamLists.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ProjectTeamLists;
			}
			set
			{
				this._ProjectTeamLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectTeam_Software_Requirement_Team", Storage="_Software_Requirement_Teams", ThisKey="TeamID", OtherKey="TeamID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<Software_Requirement_Team> Software_Requirement_Teams
		{
			get
			{
				if ((this.serializing 
							&& (this._Software_Requirement_Teams.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Software_Requirement_Teams;
			}
			set
			{
				this._Software_Requirement_Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTeam", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectTeams.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectTeams.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectTeamLists(ProjectTeamList entity)
		{
			this.SendPropertyChanging();
			entity.ProjectTeam = this;
		}
		
		private void detach_ProjectTeamLists(ProjectTeamList entity)
		{
			this.SendPropertyChanging();
			entity.ProjectTeam = null;
		}
		
		private void attach_Software_Requirement_Teams(Software_Requirement_Team entity)
		{
			this.SendPropertyChanging();
			entity.ProjectTeam = this;
		}
		
		private void detach_Software_Requirement_Teams(Software_Requirement_Team entity)
		{
			this.SendPropertyChanging();
			entity.ProjectTeam = null;
		}
		
		private void Initialize()
		{
			this._ProjectTeamLists = new EntitySet<ProjectTeamList>(new Action<ProjectTeamList>(this.attach_ProjectTeamLists), new Action<ProjectTeamList>(this.detach_ProjectTeamLists));
			this._Software_Requirement_Teams = new EntitySet<Software_Requirement_Team>(new Action<Software_Requirement_Team>(this.attach_Software_Requirement_Teams), new Action<Software_Requirement_Team>(this.detach_Software_Requirement_Teams));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectTeamList")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class ProjectTeamList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private int _EmpID;
		
		private int _TypeID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<ProjectTeam> _ProjectTeam;
		
		private EntityRef<TypeOfUser> _TypeOfUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnEmpIDChanging(int value);
    partial void OnEmpIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    #endregion
		
		public ProjectTeamList()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._ProjectTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int EmpID
		{
			get
			{
				return this._EmpID;
			}
			set
			{
				if ((this._EmpID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpIDChanging(value);
					this.SendPropertyChanging();
					this._EmpID = value;
					this.SendPropertyChanged("EmpID");
					this.OnEmpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._TypeOfUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ProjectTeamList", Storage="_Employee", ThisKey="EmpID", OtherKey="EmpId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ProjectTeamLists.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ProjectTeamLists.Add(this);
						this._EmpID = value.EmpId;
					}
					else
					{
						this._EmpID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectTeam_ProjectTeamList", Storage="_ProjectTeam", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public ProjectTeam ProjectTeam
		{
			get
			{
				return this._ProjectTeam.Entity;
			}
			set
			{
				ProjectTeam previousValue = this._ProjectTeam.Entity;
				if (((previousValue != value) 
							|| (this._ProjectTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectTeam.Entity = null;
						previousValue.ProjectTeamLists.Remove(this);
					}
					this._ProjectTeam.Entity = value;
					if ((value != null))
					{
						value.ProjectTeamLists.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("ProjectTeam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeOfUser_ProjectTeamList", Storage="_TypeOfUser", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public TypeOfUser TypeOfUser
		{
			get
			{
				return this._TypeOfUser.Entity;
			}
			set
			{
				TypeOfUser previousValue = this._TypeOfUser.Entity;
				if (((previousValue != value) 
							|| (this._TypeOfUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeOfUser.Entity = null;
						previousValue.ProjectTeamLists.Remove(this);
					}
					this._TypeOfUser.Entity = value;
					if ((value != null))
					{
						value.ProjectTeamLists.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("TypeOfUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Employee = default(EntityRef<Employee>);
			this._ProjectTeam = default(EntityRef<ProjectTeam>);
			this._TypeOfUser = default(EntityRef<TypeOfUser>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Software_Requirement_Teams")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Software_Requirement_Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Sr_ID;
		
		private int _TeamID;
		
		private EntityRef<ProjectTeam> _ProjectTeam;
		
		private EntityRef<Software_Requirement> _Software_Requirement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSr_IDChanging(int value);
    partial void OnSr_IDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    #endregion
		
		public Software_Requirement_Team()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sr_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Sr_ID
		{
			get
			{
				return this._Sr_ID;
			}
			set
			{
				if ((this._Sr_ID != value))
				{
					if (this._Software_Requirement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSr_IDChanging(value);
					this.SendPropertyChanging();
					this._Sr_ID = value;
					this.SendPropertyChanged("Sr_ID");
					this.OnSr_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._ProjectTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectTeam_Software_Requirement_Team", Storage="_ProjectTeam", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public ProjectTeam ProjectTeam
		{
			get
			{
				return this._ProjectTeam.Entity;
			}
			set
			{
				ProjectTeam previousValue = this._ProjectTeam.Entity;
				if (((previousValue != value) 
							|| (this._ProjectTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectTeam.Entity = null;
						previousValue.Software_Requirement_Teams.Remove(this);
					}
					this._ProjectTeam.Entity = value;
					if ((value != null))
					{
						value.Software_Requirement_Teams.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("ProjectTeam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Software_Requirement_Software_Requirement_Team", Storage="_Software_Requirement", ThisKey="Sr_ID", OtherKey="Sr_ID", IsForeignKey=true)]
		public Software_Requirement Software_Requirement
		{
			get
			{
				return this._Software_Requirement.Entity;
			}
			set
			{
				Software_Requirement previousValue = this._Software_Requirement.Entity;
				if (((previousValue != value) 
							|| (this._Software_Requirement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Software_Requirement.Entity = null;
						previousValue.Software_Requirement_Teams.Remove(this);
					}
					this._Software_Requirement.Entity = value;
					if ((value != null))
					{
						value.Software_Requirement_Teams.Add(this);
						this._Sr_ID = value.Sr_ID;
					}
					else
					{
						this._Sr_ID = default(int);
					}
					this.SendPropertyChanged("Software_Requirement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._ProjectTeam = default(EntityRef<ProjectTeam>);
			this._Software_Requirement = default(EntityRef<Software_Requirement>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Software_Requirements")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Software_Requirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Sr_ID;
		
		private string _Sr_Title;
		
		private string _Sr_Desc;
		
		private System.DateTime _Sr_Date;
		
		private string _Sr_IssuesText;
		
		private int _ProjectID;
		
		private EntitySet<Software_Requirement_Team> _Software_Requirement_Teams;
		
		private EntitySet<WpsForSr> _WpsForSrs;
		
		private EntityRef<Project> _Project;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSr_IDChanging(int value);
    partial void OnSr_IDChanged();
    partial void OnSr_TitleChanging(string value);
    partial void OnSr_TitleChanged();
    partial void OnSr_DescChanging(string value);
    partial void OnSr_DescChanged();
    partial void OnSr_DateChanging(System.DateTime value);
    partial void OnSr_DateChanged();
    partial void OnSr_IssuesTextChanging(string value);
    partial void OnSr_IssuesTextChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    #endregion
		
		public Software_Requirement()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sr_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Sr_ID
		{
			get
			{
				return this._Sr_ID;
			}
			set
			{
				if ((this._Sr_ID != value))
				{
					this.OnSr_IDChanging(value);
					this.SendPropertyChanging();
					this._Sr_ID = value;
					this.SendPropertyChanged("Sr_ID");
					this.OnSr_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sr_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Sr_Title
		{
			get
			{
				return this._Sr_Title;
			}
			set
			{
				if ((this._Sr_Title != value))
				{
					this.OnSr_TitleChanging(value);
					this.SendPropertyChanging();
					this._Sr_Title = value;
					this.SendPropertyChanged("Sr_Title");
					this.OnSr_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sr_Desc", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Sr_Desc
		{
			get
			{
				return this._Sr_Desc;
			}
			set
			{
				if ((this._Sr_Desc != value))
				{
					this.OnSr_DescChanging(value);
					this.SendPropertyChanging();
					this._Sr_Desc = value;
					this.SendPropertyChanged("Sr_Desc");
					this.OnSr_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sr_Date", DbType="DateTime NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.DateTime Sr_Date
		{
			get
			{
				return this._Sr_Date;
			}
			set
			{
				if ((this._Sr_Date != value))
				{
					this.OnSr_DateChanging(value);
					this.SendPropertyChanging();
					this._Sr_Date = value;
					this.SendPropertyChanged("Sr_Date");
					this.OnSr_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sr_IssuesText", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Sr_IssuesText
		{
			get
			{
				return this._Sr_IssuesText;
			}
			set
			{
				if ((this._Sr_IssuesText != value))
				{
					this.OnSr_IssuesTextChanging(value);
					this.SendPropertyChanging();
					this._Sr_IssuesText = value;
					this.SendPropertyChanged("Sr_IssuesText");
					this.OnSr_IssuesTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Software_Requirement_Software_Requirement_Team", Storage="_Software_Requirement_Teams", ThisKey="Sr_ID", OtherKey="Sr_ID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7, EmitDefaultValue=false)]
		public EntitySet<Software_Requirement_Team> Software_Requirement_Teams
		{
			get
			{
				if ((this.serializing 
							&& (this._Software_Requirement_Teams.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Software_Requirement_Teams;
			}
			set
			{
				this._Software_Requirement_Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Software_Requirement_WpsForSr", Storage="_WpsForSrs", ThisKey="Sr_ID", OtherKey="Sr_ID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<WpsForSr> WpsForSrs
		{
			get
			{
				if ((this.serializing 
							&& (this._WpsForSrs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._WpsForSrs;
			}
			set
			{
				this._WpsForSrs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Software_Requirement", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Software_Requirements.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Software_Requirements.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Software_Requirement_Teams(Software_Requirement_Team entity)
		{
			this.SendPropertyChanging();
			entity.Software_Requirement = this;
		}
		
		private void detach_Software_Requirement_Teams(Software_Requirement_Team entity)
		{
			this.SendPropertyChanging();
			entity.Software_Requirement = null;
		}
		
		private void attach_WpsForSrs(WpsForSr entity)
		{
			this.SendPropertyChanging();
			entity.Software_Requirement = this;
		}
		
		private void detach_WpsForSrs(WpsForSr entity)
		{
			this.SendPropertyChanging();
			entity.Software_Requirement = null;
		}
		
		private void Initialize()
		{
			this._Software_Requirement_Teams = new EntitySet<Software_Requirement_Team>(new Action<Software_Requirement_Team>(this.attach_Software_Requirement_Teams), new Action<Software_Requirement_Team>(this.detach_Software_Requirement_Teams));
			this._WpsForSrs = new EntitySet<WpsForSr>(new Action<WpsForSr>(this.attach_WpsForSrs), new Action<WpsForSr>(this.detach_WpsForSrs));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeOfUser")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TypeOfUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private string _Title;
		
		private EntitySet<ProjectTeamList> _ProjectTeamLists;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public TypeOfUser()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeOfUser_ProjectTeamList", Storage="_ProjectTeamLists", ThisKey="TypeID", OtherKey="TypeID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<ProjectTeamList> ProjectTeamLists
		{
			get
			{
				if ((this.serializing 
							&& (this._ProjectTeamLists.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ProjectTeamLists;
			}
			set
			{
				this._ProjectTeamLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectTeamLists(ProjectTeamList entity)
		{
			this.SendPropertyChanging();
			entity.TypeOfUser = this;
		}
		
		private void detach_ProjectTeamLists(ProjectTeamList entity)
		{
			this.SendPropertyChanging();
			entity.TypeOfUser = null;
		}
		
		private void Initialize()
		{
			this._ProjectTeamLists = new EntitySet<ProjectTeamList>(new Action<ProjectTeamList>(this.attach_ProjectTeamLists), new Action<ProjectTeamList>(this.detach_ProjectTeamLists));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkPackageDescription")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class WorkPackageDescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Wp_Id;
		
		private System.DateTime _Wp_Date;
		
		private string _Wp_Description;
		
		private int _ProjectID;
		
		private int _CreatedBy;
		
		private string _Wp_Title;
		
		private EntitySet<WpsForSr> _WpsForSrs;
		
		private EntitySet<StatusReport> _StatusReports;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Project> _Project;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWp_IdChanging(int value);
    partial void OnWp_IdChanged();
    partial void OnWp_DateChanging(System.DateTime value);
    partial void OnWp_DateChanged();
    partial void OnWp_DescriptionChanging(string value);
    partial void OnWp_DescriptionChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnWp_TitleChanging(string value);
    partial void OnWp_TitleChanged();
    #endregion
		
		public WorkPackageDescription()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wp_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Wp_Id
		{
			get
			{
				return this._Wp_Id;
			}
			set
			{
				if ((this._Wp_Id != value))
				{
					this.OnWp_IdChanging(value);
					this.SendPropertyChanging();
					this._Wp_Id = value;
					this.SendPropertyChanged("Wp_Id");
					this.OnWp_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wp_Date", DbType="Date NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.DateTime Wp_Date
		{
			get
			{
				return this._Wp_Date;
			}
			set
			{
				if ((this._Wp_Date != value))
				{
					this.OnWp_DateChanging(value);
					this.SendPropertyChanging();
					this._Wp_Date = value;
					this.SendPropertyChanged("Wp_Date");
					this.OnWp_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wp_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Wp_Description
		{
			get
			{
				return this._Wp_Description;
			}
			set
			{
				if ((this._Wp_Description != value))
				{
					this.OnWp_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Wp_Description = value;
					this.SendPropertyChanged("Wp_Description");
					this.OnWp_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wp_Title", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Wp_Title
		{
			get
			{
				return this._Wp_Title;
			}
			set
			{
				if ((this._Wp_Title != value))
				{
					this.OnWp_TitleChanging(value);
					this.SendPropertyChanging();
					this._Wp_Title = value;
					this.SendPropertyChanged("Wp_Title");
					this.OnWp_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkPackageDescription_WpsForSr", Storage="_WpsForSrs", ThisKey="Wp_Id", OtherKey="Wp_Id")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7, EmitDefaultValue=false)]
		public EntitySet<WpsForSr> WpsForSrs
		{
			get
			{
				if ((this.serializing 
							&& (this._WpsForSrs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._WpsForSrs;
			}
			set
			{
				this._WpsForSrs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkPackageDescription_StatusReport", Storage="_StatusReports", ThisKey="Wp_Id", OtherKey="Wp_Id")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<StatusReport> StatusReports
		{
			get
			{
				if ((this.serializing 
							&& (this._StatusReports.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._StatusReports;
			}
			set
			{
				this._StatusReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkPackageDescription", Storage="_Employee", ThisKey="CreatedBy", OtherKey="EmpId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.WorkPackageDescriptions.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.WorkPackageDescriptions.Add(this);
						this._CreatedBy = value.EmpId;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_WorkPackageDescription", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.WorkPackageDescriptions.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.WorkPackageDescriptions.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WpsForSrs(WpsForSr entity)
		{
			this.SendPropertyChanging();
			entity.WorkPackageDescription = this;
		}
		
		private void detach_WpsForSrs(WpsForSr entity)
		{
			this.SendPropertyChanging();
			entity.WorkPackageDescription = null;
		}
		
		private void attach_StatusReports(StatusReport entity)
		{
			this.SendPropertyChanging();
			entity.WorkPackageDescription = this;
		}
		
		private void detach_StatusReports(StatusReport entity)
		{
			this.SendPropertyChanging();
			entity.WorkPackageDescription = null;
		}
		
		private void Initialize()
		{
			this._WpsForSrs = new EntitySet<WpsForSr>(new Action<WpsForSr>(this.attach_WpsForSrs), new Action<WpsForSr>(this.detach_WpsForSrs));
			this._StatusReports = new EntitySet<StatusReport>(new Action<StatusReport>(this.attach_StatusReports), new Action<StatusReport>(this.detach_StatusReports));
			this._Employee = default(EntityRef<Employee>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WpsForSrs")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class WpsForSr : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Wp_Id;
		
		private int _Sr_ID;
		
		private EntityRef<Software_Requirement> _Software_Requirement;
		
		private EntityRef<WorkPackageDescription> _WorkPackageDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWp_IdChanging(int value);
    partial void OnWp_IdChanged();
    partial void OnSr_IDChanging(int value);
    partial void OnSr_IDChanged();
    #endregion
		
		public WpsForSr()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wp_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Wp_Id
		{
			get
			{
				return this._Wp_Id;
			}
			set
			{
				if ((this._Wp_Id != value))
				{
					if (this._WorkPackageDescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWp_IdChanging(value);
					this.SendPropertyChanging();
					this._Wp_Id = value;
					this.SendPropertyChanged("Wp_Id");
					this.OnWp_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sr_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int Sr_ID
		{
			get
			{
				return this._Sr_ID;
			}
			set
			{
				if ((this._Sr_ID != value))
				{
					if (this._Software_Requirement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSr_IDChanging(value);
					this.SendPropertyChanging();
					this._Sr_ID = value;
					this.SendPropertyChanged("Sr_ID");
					this.OnSr_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Software_Requirement_WpsForSr", Storage="_Software_Requirement", ThisKey="Sr_ID", OtherKey="Sr_ID", IsForeignKey=true)]
		public Software_Requirement Software_Requirement
		{
			get
			{
				return this._Software_Requirement.Entity;
			}
			set
			{
				Software_Requirement previousValue = this._Software_Requirement.Entity;
				if (((previousValue != value) 
							|| (this._Software_Requirement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Software_Requirement.Entity = null;
						previousValue.WpsForSrs.Remove(this);
					}
					this._Software_Requirement.Entity = value;
					if ((value != null))
					{
						value.WpsForSrs.Add(this);
						this._Sr_ID = value.Sr_ID;
					}
					else
					{
						this._Sr_ID = default(int);
					}
					this.SendPropertyChanged("Software_Requirement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkPackageDescription_WpsForSr", Storage="_WorkPackageDescription", ThisKey="Wp_Id", OtherKey="Wp_Id", IsForeignKey=true)]
		public WorkPackageDescription WorkPackageDescription
		{
			get
			{
				return this._WorkPackageDescription.Entity;
			}
			set
			{
				WorkPackageDescription previousValue = this._WorkPackageDescription.Entity;
				if (((previousValue != value) 
							|| (this._WorkPackageDescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkPackageDescription.Entity = null;
						previousValue.WpsForSrs.Remove(this);
					}
					this._WorkPackageDescription.Entity = value;
					if ((value != null))
					{
						value.WpsForSrs.Add(this);
						this._Wp_Id = value.Wp_Id;
					}
					else
					{
						this._Wp_Id = default(int);
					}
					this.SendPropertyChanged("WorkPackageDescription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Software_Requirement = default(EntityRef<Software_Requirement>);
			this._WorkPackageDescription = default(EntityRef<WorkPackageDescription>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatusReport")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class StatusReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusReportID;
		
		private string _StatusReportLog;
		
		private int _Wp_Id;
		
		private string _ReportTitle;
		
		private EntityRef<WorkPackageDescription> _WorkPackageDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusReportIDChanging(int value);
    partial void OnStatusReportIDChanged();
    partial void OnStatusReportLogChanging(string value);
    partial void OnStatusReportLogChanged();
    partial void OnWp_IdChanging(int value);
    partial void OnWp_IdChanged();
    partial void OnReportTitleChanging(string value);
    partial void OnReportTitleChanged();
    #endregion
		
		public StatusReport()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusReportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int StatusReportID
		{
			get
			{
				return this._StatusReportID;
			}
			set
			{
				if ((this._StatusReportID != value))
				{
					this.OnStatusReportIDChanging(value);
					this.SendPropertyChanging();
					this._StatusReportID = value;
					this.SendPropertyChanged("StatusReportID");
					this.OnStatusReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusReportLog", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string StatusReportLog
		{
			get
			{
				return this._StatusReportLog;
			}
			set
			{
				if ((this._StatusReportLog != value))
				{
					this.OnStatusReportLogChanging(value);
					this.SendPropertyChanging();
					this._StatusReportLog = value;
					this.SendPropertyChanged("StatusReportLog");
					this.OnStatusReportLogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wp_Id", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int Wp_Id
		{
			get
			{
				return this._Wp_Id;
			}
			set
			{
				if ((this._Wp_Id != value))
				{
					if (this._WorkPackageDescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWp_IdChanging(value);
					this.SendPropertyChanging();
					this._Wp_Id = value;
					this.SendPropertyChanged("Wp_Id");
					this.OnWp_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportTitle", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string ReportTitle
		{
			get
			{
				return this._ReportTitle;
			}
			set
			{
				if ((this._ReportTitle != value))
				{
					this.OnReportTitleChanging(value);
					this.SendPropertyChanging();
					this._ReportTitle = value;
					this.SendPropertyChanged("ReportTitle");
					this.OnReportTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkPackageDescription_StatusReport", Storage="_WorkPackageDescription", ThisKey="Wp_Id", OtherKey="Wp_Id", IsForeignKey=true)]
		public WorkPackageDescription WorkPackageDescription
		{
			get
			{
				return this._WorkPackageDescription.Entity;
			}
			set
			{
				WorkPackageDescription previousValue = this._WorkPackageDescription.Entity;
				if (((previousValue != value) 
							|| (this._WorkPackageDescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkPackageDescription.Entity = null;
						previousValue.StatusReports.Remove(this);
					}
					this._WorkPackageDescription.Entity = value;
					if ((value != null))
					{
						value.StatusReports.Add(this);
						this._Wp_Id = value.Wp_Id;
					}
					else
					{
						this._Wp_Id = default(int);
					}
					this.SendPropertyChanged("WorkPackageDescription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._WorkPackageDescription = default(EntityRef<WorkPackageDescription>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
}
#pragma warning restore 1591
